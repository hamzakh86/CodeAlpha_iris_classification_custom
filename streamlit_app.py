#!/usr/bin/env python3
"""
Application Streamlit pour la classification des fleurs d'Iris
Version personnalis√©e avec interface am√©lior√©e
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt

# Configuration de la page
st.set_page_config(
    page_title="Classification Iris - Hamza Khaled",
    page_icon="üå∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #2E8B57;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 5px solid #2E8B57;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """Charger les donn√©es Iris."""
    return sns.load_dataset('iris')

@st.cache_resource
def load_model():
    """Charger le mod√®le pr√©-entra√Æn√©."""
    try:
        with open('best_iris_model.pkl', 'rb') as f:
            model_data = pickle.load(f)
        return model_data
    except FileNotFoundError:
        st.error("Mod√®le non trouv√©. Veuillez d'abord ex√©cuter l'entra√Ænement.")
        return None

def main():
    """Fonction principale de l'application."""
    
    # En-t√™te
    st.markdown('<h1 class="main-header">üå∏ Classification des Fleurs d\'Iris</h1>', 
                unsafe_allow_html=True)
    st.markdown("### Version Personnalis√©e - Hamza Khaled")
    
    # Sidebar
    st.sidebar.title("Navigation")
    page = st.sidebar.selectbox(
        "Choisir une page",
        ["üè† Accueil", "üìä Exploration des donn√©es", "üîÆ Pr√©diction", "üìà Analyse des mod√®les"]
    )
    
    # Charger les donn√©es
    df = load_data()
    model_data = load_model()
    
    if page == "üè† Accueil":
        show_home_page(df)
    elif page == "üìä Exploration des donn√©es":
        show_data_exploration(df)
    elif page == "üîÆ Pr√©diction":
        show_prediction_page(model_data)
    elif page == "üìà Analyse des mod√®les":
        show_model_analysis()

def show_home_page(df):
    """Afficher la page d'accueil."""
    st.markdown("## Bienvenue dans l'application de classification Iris!")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("√âchantillons totaux", len(df))
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Caract√©ristiques", len(df.columns) - 1)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Esp√®ces", df['species'].nunique())
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Description du projet
    st.markdown("""
    ### üìã Description du projet
    
    Cette application utilise des techniques d'apprentissage automatique pour classifier les fleurs d'Iris
    en trois esp√®ces diff√©rentes bas√©es sur leurs caract√©ristiques morphologiques:
    
    - **Iris Setosa** üå∫
    - **Iris Versicolor** üå∏  
    - **Iris Virginica** üåº
    
    ### üî¨ Caract√©ristiques utilis√©es
    
    - **Longueur du s√©pale** (sepal_length)
    - **Largeur du s√©pale** (sepal_width)
    - **Longueur du p√©tale** (petal_length)
    - **Largeur du p√©tale** (petal_width)
    
    ### ü§ñ Mod√®les impl√©ment√©s
    
    - R√©gression Logistique
    - K-Plus Proches Voisins
    - Machine √† Vecteurs de Support
    - Naive Bayes
    - Arbre de D√©cision
    - For√™t Al√©atoire
    - Gradient Boosting
    """)

def show_data_exploration(df):
    """Afficher l'exploration des donn√©es."""
    st.markdown("## üìä Exploration des donn√©es")
    
    # Aper√ßu des donn√©es
    st.subheader("Aper√ßu du dataset")
    st.dataframe(df.head(10))
    
    # Statistiques descriptives
    st.subheader("Statistiques descriptives")
    st.dataframe(df.describe())
    
    # Distribution des esp√®ces
    st.subheader("Distribution des esp√®ces")
    species_count = df['species'].value_counts()
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig_pie = px.pie(values=species_count.values, names=species_count.index,
                        title="R√©partition des esp√®ces")
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        fig_bar = px.bar(x=species_count.index, y=species_count.values,
                        title="Nombre d'√©chantillons par esp√®ce")
        st.plotly_chart(fig_bar, use_container_width=True)
    
    # Visualisations interactives
    st.subheader("Visualisations interactives")
    
    # S√©lection des caract√©ristiques
    features = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
    
    col1, col2 = st.columns(2)
    with col1:
        x_axis = st.selectbox("Axe X", features, index=0)
    with col2:
        y_axis = st.selectbox("Axe Y", features, index=2)
    
    # Scatter plot interactif
    fig_scatter = px.scatter(df, x=x_axis, y=y_axis, color='species',
                           title=f"{x_axis} vs {y_axis}",
                           hover_data=features)
    st.plotly_chart(fig_scatter, use_container_width=True)
    
    # Matrice de corr√©lation
    st.subheader("Matrice de corr√©lation")
    corr_matrix = df.select_dtypes(include=[np.number]).corr()
    
    fig_heatmap = px.imshow(corr_matrix, 
                           text_auto=True, 
                           aspect="auto",
                           title="Matrice de corr√©lation des caract√©ristiques")
    st.plotly_chart(fig_heatmap, use_container_width=True)

def show_prediction_page(model_data):
    """Afficher la page de pr√©diction."""
    st.markdown("## üîÆ Pr√©diction d'esp√®ce")
    
    if model_data is None:
        st.error("Mod√®le non disponible. Veuillez d'abord entra√Æner le mod√®le.")
        return
    
    st.markdown("### Entrez les caract√©ristiques de la fleur:")
    
    col1, col2 = st.columns(2)
    
    with col1:
        sepal_length = st.slider("Longueur du s√©pale (cm)", 4.0, 8.0, 5.8, 0.1)
        sepal_width = st.slider("Largeur du s√©pale (cm)", 2.0, 4.5, 3.0, 0.1)
    
    with col2:
        petal_length = st.slider("Longueur du p√©tale (cm)", 1.0, 7.0, 4.0, 0.1)
        petal_width = st.slider("Largeur du p√©tale (cm)", 0.1, 2.5, 1.2, 0.1)
    
    # Pr√©diction
    if st.button("üîç Pr√©dire l'esp√®ce", type="primary"):
        sample = np.array([[sepal_length, sepal_width, petal_length, petal_width]])
        sample_scaled = model_data['scaler'].transform(sample)
        
        prediction = model_data['model'].predict(sample_scaled)
        probabilities = model_data['model'].predict_proba(sample_scaled)
        
        species = model_data['label_encoder'].inverse_transform(prediction)[0]
        confidence = np.max(probabilities)
        
        # Affichage des r√©sultats
        st.markdown("---")
        st.markdown("### üéØ R√©sultat de la pr√©diction")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.metric("Esp√®ce pr√©dite", species)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.metric("Confiance", f"{confidence:.2%}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col3:
            # Emoji selon l'esp√®ce
            emoji_map = {
                'setosa': 'üå∫',
                'versicolor': 'üå∏',
                'virginica': 'üåº'
            }
            emoji = emoji_map.get(species, 'üå∏')
            st.markdown(f'<div style="font-size: 4rem; text-align: center;">{emoji}</div>', 
                       unsafe_allow_html=True)
        
        # Graphique des probabilit√©s
        st.markdown("### üìä Probabilit√©s par esp√®ce")
        species_names = model_data['label_encoder'].classes_
        prob_df = pd.DataFrame({
            'Esp√®ce': species_names,
            'Probabilit√©': probabilities[0]
        })
        
        fig_prob = px.bar(prob_df, x='Esp√®ce', y='Probabilit√©',
                         title="Distribution des probabilit√©s")
        st.plotly_chart(fig_prob, use_container_width=True)

def show_model_analysis():
    """Afficher l'analyse des mod√®les."""
    st.markdown("## üìà Analyse des mod√®les")
    
    st.markdown("""
    ### üî¨ M√©thodologie
    
    Cette analyse compare plusieurs algorithmes d'apprentissage automatique:
    
    1. **R√©gression Logistique**: Mod√®le lin√©aire simple et interpr√©table
    2. **K-Plus Proches Voisins**: Classification bas√©e sur la similarit√©
    3. **Machine √† Vecteurs de Support**: Recherche de fronti√®res optimales
    4. **Naive Bayes**: Approche probabiliste
    5. **Arbre de D√©cision**: Mod√®le bas√© sur des r√®gles
    6. **For√™t Al√©atoire**: Ensemble d'arbres de d√©cision
    7. **Gradient Boosting**: Optimisation s√©quentielle
    
    ### üìä M√©triques d'√©valuation
    
    - **Accuracy**: Pourcentage de pr√©dictions correctes
    - **Precision**: Proportion de vrais positifs parmi les pr√©dictions positives
    - **Recall**: Proportion de vrais positifs d√©tect√©s
    - **F1-Score**: Moyenne harmonique de la pr√©cision et du rappel
    - **Cross-Validation**: Validation crois√©e √† 5 plis
    
    ### üèÜ Avantages de cette approche
    
    - **Comparaison exhaustive** de multiple algorithmes
    - **Optimisation des hyperparam√®tres** pour le meilleur mod√®le
    - **Validation crois√©e** pour √©viter le surapprentissage
    - **M√©triques multiples** pour une √©valuation compl√®te
    - **Interface interactive** pour les pr√©dictions en temps r√©el
    """)

if __name__ == "__main__":
    main()

